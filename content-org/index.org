-*- mode: Org; org-download-image-dir: "./images"; -*-
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: -:nil ^:{} num:nil toc:nil
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t todo:t |:t

#+author: Dylan Kendal
#+bibliography:
#+creator: Emacs 26.3 (Org mode fatal: not a git repository (or any of the parent directories): .git + ox-hugo)
#+date: <2020-05-07 Thu>
#+description:
#+email: dylankendal@gmail.com
#+exclude_tags: noexport
#+language: en
#+select_tags: export

#+title: Dylan Kendal

#+hugo_base_dir: ../
#+hugo_section: ./

#+hugo_date_format: %Y-%m-%dT%T%z
#+hugo_front_matter_format: toml
#+hugo_level_offset: 1
#+hugo_auto_set_lastmod: t
#+hugo_weight: auto
#+HUGO_CODE_FENCE: nil

* Posts
  :PROPERTIES:
  :export_hugo_section*: posts
  :CREATED:  <2020-05-07 Thu 10:54>
  :END:
** DONE Create a vim quickfix list from the clipboard                   :vim:
   :PROPERTIES:
   :export_file_name: vim-quickfix-clipboard
   :CREATED:  <2020-05-07 Thu 14:34>
   :END:

   Do you find yourself editing a buffer containing file paths and you
   want to quickly switch between them?

   The =:cex[pr][!} {expr}= command executes any valid vim expression
   (={expr}=) and constructs a quickfix list from each string of the output.
   
   Assuming you've =set clipboard= to =unnamed= or =unamedplus=, you
   can supply the clipboard register (=@*=, or =@+= respectively) as a
   vim expression.
   
   #+begin_src vim -n 1
   "assuming :set clipboard=unnamed
   :cex @* 
   #+end_src
   
   or:
   
   #+begin_src vim
   "assuming :set clipboard=unnamedplus
   :cex @+ 
   #+end_src
   
   Now you can set the quickfix to the current contents of your
   clipboard, note that your input will still have to match your [[https://neovim.io/doc/user/options.html#'errorformat'][errorformat]].
   
   @@html:<div class="block"><script id="asciicast-SHFPgdNJTVOH9j8RkSyQpQ2uz" src="https://asciinema.org/a/SHFPgdNJTVOH9j8RkSyQpQ2uz.js" async></script></div>@@
** TODO Writing a sorbet codegeneration tool                    :ruby:sorbet:
   :PROPERTIES:
   :CREATED:  <2020-05-09 Sat 11:17>
   :END:
** TODO Spotify skipping through all tracks after reboot :linux:
   :PROPERTIES:
   :CREATED:  <2020-05-21 Thu 12:55>
   :END:
   Make sure that pulse audio is started
** TODO Build Interactive cli tools with FZF                           :linux:
   :PROPERTIES:
   :CREATED:  <2020-05-08 Fri 14:00>
   :END:
** TODO Org-pomodoro status in i3bar                                   :linux:i3:emacs:
   :PROPERTIES:
   :CREATED:  <2020-05-08 Fri 14:12>
   :END:
** TODO Setting the quick fix from another kitty pane                   :vim:
   :PROPERTIES:
   :CREATED:  <2020-05-08 Fri 14:21>
   :END:
** TODO Filter the quickfix list to only valid entries :vim:
   :PROPERTIES:
   :CREATED:  <2020-05-08 Fri 14:33>
   :END:
** TODO embedded syntax in vim                                          :vim:
   :PROPERTIES:
   :CREATED:  <2020-05-08 Fri 15:48>
   :END:
** TODO sorbet fixer using lua :ale:vim:lua:sorbet:
   :PROPERTIES:
   :CREATED:  <2020-05-08 Fri 15:52>
   :END:
   
** TODO Execute visual selection in vimscript                           :vim:
   :PROPERTIES:
   :CREATED:  <2020-05-08 Fri 15:29>
   :END:
   Yank the text (which will put it in register 0)
   Because a register is valid vim expression we can just execute the contents of the register with
   
   #+begin_src vim
   :@0
   #+end_src
   
   Execute a range
   set mark 'a, 'b
   
   #+begin_src vim
   :'a,'b y | @0
   #+end_src
** TODO Set the quickfix with mix errors                         :vim:elixir:
   :PROPERTIES:
   :CREATED:  <2020-05-11 Mon 13:33>
   :END:
** TODO Elixir Plug api token auth                                   :elixir:
   :PROPERTIES:
   :CREATED:  <2020-05-28 Thu 14:05>
   :END:
** TODO lua scripting and lua rocks for vim plugin :vim:lua:
   :PROPERTIES:
   :CREATED:  <2020-05-29 Fri 14:54>
   :END:
** TODO Importing lua rocks dependencies from vim :vim:lua:
   :PROPERTIES:
   :CREATED:  <2020-06-03 Wed 10:23>
   :END:
   First check what version of lua your install of vim is packaged with with =:h lua=. At the time of writing the packaged version was 5.1.
   Next make sure that your shell version of luarocks coresponds with a 5.1 minor version. I'm using asdf to manage versions so I install lua and luarocks with =asdf install lua 5.1.5=.
   Make sure that =LUA_PATH= and =LUA_CPATH= is set. Fish is my shell, so I have a function in my =config.fish= that sets these variables from luarocks.
   
   #+begin_src fish
    function fish_set_lua_path
	set -xU LUA_PATH (luarocks path --lr-path)
	set -xU LUA_CPATH (luarocks path --lr-cpath)
    end
   #+end_src
   
   Debuggin problems:
   - read =h: lua-require=
   - Check package.cpath =:lua print(vim.inspect(package.cpath))= is your library in that path?
   - rocks MUST be installed with a version of lua that matches vim's version. Vim will check for =**/5.1/*= paths, so if you installed with 5.3 it will be in a different directory.
     
   Test that your package is present:
   
   #+begin_src fish
   luarocks install --local lpeg
   #+end_src
   
   #+begin_src vimrc
   :lua print(vim.inspect(require('lpeg')))
   #+end_src
   
   #+begin_src fish
   nvim -V1 -Es -c"lua print(vim.inspect(require('lpeg')))" 2>&1
   #+end_src
   
   You should see a print out of the module if it succeeds.

** TODO elixir remote plugin neovim :elixir:
   :PROPERTIES:
   :CREATED:  <2020-05-29 Fri 14:54>
   :END:
* Styleguide
  :PROPERTIES:
  :CREATED:  <2020-06-18 Thu 13:10>
  :export_file_name: styleguide
  :END:
** Alphabet test
  (1)abcdefghijklmnopqrstuvwxyz(2)abcdefghijklmnopqrstuvwxyz(3)abcdefghijklmnopqrstuvwxyz
  
** Paragraphs
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
  eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim
  ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut
  aliquip ex ea commodo consequat. Duis aute irure dolor in
  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
  culpa qui officia deserunt mollit anim id est laborum.
  
  <hr/>
** Lists
 - Lorem ipsum dolor sit amet
   - Lorem ipsum dolor sit amet
   - Lorem ipsum dolor sit amet
   - Lorem ipsum dolor sit amet
 - Lorem ipsum dolor sit amet
   1) Lorem ipsum dolor sit amet
   2) Lorem ipsum dolor sit amet
   3) Lorem ipsum dolor sit amet
 - Lorem ipsum dolor sit amet
   - [X] Lorem ipsum dolor sit amet
   - [X] Lorem ipsum dolor sit amet
   - [ ] Lorem ipsum dolor sit amet
 - Lorem ipsum dolor sit amet
   - Lorem :: ipsum dolor sit amet
   - Lorem :: ipsum dolor sit amet
   - Lorem :: ipsum dolor sit amet
     
** Block quote
   Here is some text that isn't part of the quote.

  #+begin_quote
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
  eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim
  ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut
  aliquip ex ea commodo consequat. Duis aute irure dolor in
  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
  culpa qui officia deserunt mollit anim id est laborum.
  #+end_quote
  
  Here is some text that follows the quote.
  
     
** Source block
   
    #+begin_src elixir
    @short :line
    #+end_src
    
    \\
    
    #+begin_src elixir
    30 char line==================
    #+end_src
    
    \\
    
    #+begin_src elixir
    50 char line==========================================================
    #+end_src
    
    \\
    
    #+begin_src elixir
    79 char line===================================================================
    #+end_src
    
    \\
    
    #+begin_src elixir
    @this_is a + :very ++ "very"++ "very"++ "very"++ "very"++ "very"++ "very" ++ "very" <> @@very + :very ++ "very"++ "very"++ "very"++ "very"++ "very"++ "very" ++ "very" <> @@very * ~r/long/ ~> ~w(line)
    #+end_src
    
    \\
    
    #+begin_src elixir
      def at_cursor_pos?(
	    {_, [closing: [line: l2, column: c2], line: l1, column: c1], _},
	    line,
	    col
	  )
	  when line in l1..l2 and col in c1..c2 do
	true
      end
    #+end_src
     
** Wide source block

  #+attr_html: :class wide-block
  #+begin_src elixir
    defmodule Refactor do
      use NVim.Plugin
      require Logger

      defmacro is_ast(term), do: is_list(term) or is_tuple(term)

      def init(init_arg) do
	{:ok, init_arg}
      end

      def debug(x) do
	Logger.debug(inspect(x, pretty: true))
      end

      def at_cursor_pos?(ast, {lnum, cnum}), do: at_cursor_pos?(ast, lnum, cnum)

      def at_cursor_pos?(
	    {_, [closing: [line: l2, column: c2], line: l1, column: c1], _},
	    line,
	    col
	  )
	  when line in l1..l2 and col in c1..c2 do
	true
      end

      # ...

      def count_left_just(string, count \\ 0)
      def count_left_just("", count), do: count
      def count_left_just(" " <> rest, count), do: count_left_just(rest, count + 1)
      def count_left_just(_, count), do: count

      @quoting_opts [columns: true]

      def string_to_quoted(line) do
	Code.string_to_quoted(line, @quoting_opts)
      end
    end
  #+end_src
  
  \\
  
** Example
  
  #+begin_example
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
  eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim
  ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut
  aliquip ex ea commodo consequat. Duis aute irure dolor in
  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
  culpa qui officia deserunt mollit anim id est laborum.
  #+end_example
 
\\
 
** H2 Lorem ipsum dolor sit amet
*** H3 Lorem ipsum dolor sit amet
**** H4 Lorem ipsum dolor sit amet
***** H5 Lorem ipsum dolor sit amet

      # Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
