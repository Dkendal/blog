-*- mode: Org; org-download-image-dir: "./images"; -*-
#+options: ':nil *:t -:t ::t <:t H:6 \n:nil ^:t arch:headline
#+options: -:nil ^:{} num:nil toc:nil
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t todo:t |:t

#+startup: logdone

#+author: Dylan Kendal
#+bibliography:
#+creator: Emacs
#+date: <2020-05-07 Thu>
#+description:
#+email: dylankendal@gmail.com
#+exclude_tags: noexport
#+language: en
#+select_tags: export

#+title: Dylan Kendal

#+hugo_base_dir: ../
#+hugo_section: pages
#+hugo_date_format: %Y-%m-%dT%T%z
#+hugo_front_matter_format: toml
#+hugo_level_offset: 1
#+hugo_auto_set_lastmod: t
#+hugo_weight: auto
#+hugo_code_fence: nil

* Posts
:PROPERTIES:
:CREATED:  <2020-05-07 Thu 10:54>
:END:
** DONE Jest code coverage in Neovim           :vim:javascript:jest:testing:
CLOSED: [2022-06-28 Tue]
:PROPERTIES:
:export_file_name: jest-code-coverage-neovim
:END:

I've been wanting to be able to view my code coverage directly within Vim for a long time.
Not having to switch to browser or another window shortens the feedback loop, especially when developing a test for code you aren't familiar with.
Wallaby.js is a VSCode extension that handles this really well:
it lets you run tests directly in the buffer and annotates lines with a green or red square to indicate if then statement was covered.

Well, as of today I'm happy to announce that you can have this in (Neo)vim as well!

You can download it here: https://github.com/Dkendal/nvim-coverage
   
#+DOWNLOADED: screenshot @ 2022-06-28 10:23:52
#+CAPTION: Green highlight in the sign column is a covered statement, count is how many times it was covered. Red sign column is an uncovered statement. Black and yellow is an =if= path not taken. Yellow is an uncovered branch.
[[file:images/Posts/2022-06-28_10-23-52_screenshot.png]]
   
** DONE How to install Neovim nightly                                   :vim:
CLOSED: [2021-01-24 Sun 13:02]
:PROPERTIES:
:CREATED:  <2021-01-24 Sun 12:56>
:export_file_name: how-to-install-neovim-nightly
:END:
   
Here's a quick little script that you can use build and install the
most recent release of Neovim.

#+begin_src bash
  #!/bin/bash
  cd ~ || exit 1
  sudo rm -r neovim || true
  git clone https://github.com/neovim/neovim
  cd neovim || exit 1
  sudo make CMAKE_BUILD_TYPE=Release install
  cd ~ || exit 1
  sudo rm -r neovim
#+end_src
   
I've used this on both Linux and Mac OSX without issue. This script
was originally posted on a Neovim GitHub issue tracker which I've
long since forgotten.
   
More options for the make install task [[https://github.com/neovim/neovim/wiki/Installing-Neovim][here]].
   
** DONE Change Kitty terminal color-scheme                   :fzf:kitty:fish:
CLOSED: [2021-01-20 Wed 23:05]
:PROPERTIES:
:CREATED:  <2021-01-20 Wed 22:28>
:export_file_name: change-kitty-shell-color-scheme
:END:
   
One of the more [[https://github.com/kovidgoyal/kitty/issues?q=is%3Aissue+reload+config][persistant complaints]] about the Kitty terminal emulator is the
inability to reload configuration. While you can't change every
option at runtime, you can change most display properties on fly if
you enable [[https://sw.kovidgoyal.net/kitty/remote-control.html?highlight=remote%20control][remote control]] first. After this small tweak you can
change color schemes, window padding, and font sizes on demand in
a single, or all windows; current, and future.
   
#+begin_example
  ❯ kitty @ --help
  Usage: kitty @ [options] command ...

  Control kitty by sending it commands. Set the allow_remote_control option to
  yes in kitty.conf for this to work.
#+end_example

After enabling =allow_remote_control=, we can make use of any of
the [[https://sw.kovidgoyal.net/kitty/remote-control.html#kitty-set-colors][kitty @ set-<cmd> ...]] commands.
   
This is what my kitty directory looks like. Normally I use a dark
mode theme (gruvbox.dark.conf), but as my eyes get tired I'll
switch over to my light theme (gruvbox.light.conf).
   
#+begin_example
  ~/.config/kitty
  ❯ exa -T
  .
  ├── colors
  │  ├── gruvbox.dark.conf
  │  ├── gruvbox.light.conf
  │  └── snazzy.conf
  ├── diff.conf
  └── kitty.conf
#+end_example

#+begin_src bash
  kitty @ set-colors --all --configured ~/.config/kitty/colors/gruvbox.light.conf
#+end_src
   
Voilà! =--all= changes all windows as the name implies, dropping
this flag makes the command only target the current window.
=--configured= makes the configuration sticky, and will affect all
new windows in **this instance**.
   
You can take this to the next level and create an interactive
CLI script to choose your color scheme. My next post will be on how to
create interactive CLI tools using just FZF!
   
#+begin_src bash
  header="press <enter> to enable colorscheme, <C-c> to exit." 
  bindings='enter:execute-silent(kitty @ set-colors {})' 
  preview='bat {}'
  find ~/.config/kitty/colors/ -name '*.conf' 
  fzf --header "$header" --bind "$bindigs" --preview "$preview"
#+end_src
   
Here it is in action.
   
#+begin_export html
<video controls src="/video/1fe86b9a71474352-kitty-fzf-colorscheme-change.webm">
</video>
#+end_export

If you use fish shell you can copy the function below to have a color
scheme toggle with auto completion
   
#+begin_src fish
     # ~/.config/fish/functions/kitty-colorscheme.fish   
     function kitty-colorscheme -a colorscheme
       kitty @ set-colors --all --configured ~/.config/kitty/colors/$colorscheme.conf
     end 
     
     set -l colorschemes (fd 'conf' ~/.config/kitty/colors | rg $HOME'/.config/kitty/colors/(.*)\.conf' --replace '$1')
     
     complete -c kitty-colorscheme --no-files --require-parameter --arguments "$colorschemes" 
#+end_src
   
   
** DONE Batch export Org-mode pages                      :emacs:orgmode:hugo:
CLOSED: [2020-06-27 Sat 18:03]
:PROPERTIES:
:CREATED:  <2020-06-27 Sat 16:58>
:export_file_name: batch-export-org-mode-pages
:END:
   
A common task if - like me - you use /Org-mode/ to create static
websites; is to export the document to your destination format.
Take this blog for instance. It's written in /Org-mode/, which is
exported to /markdown/ for use by /Hugo/ which will then compile it
to /HTML/. The obvious choice for exporting your content would be
to call the command directly within Emacs, but say you wanted to do
this as a part of some other build process or as part of an
automated continuous deployment process it would be necessary to
invoke the export command from the shell.

Fortunately, Emacs provides the ability to use it in a non-interactive
manner via the =--batch= flag.

#+begin_example
  --batch                     do not do interactive display; implies -q
  --no-init-file, -q          load neither ~/.emacs nor default.el
#+end_example

Running Emacs in batch mode we just need to open our /Org-mode/
document, either programmatically or with the =--visit FILE= flag, load
whatever /Org-mode exporter/ library, and call its export function. I'm
using /ox-Hugo/ so that's what'll I'll require. It's also necessary to
ensure the Emacs can load this library; the easiest way I
know how to do this is to call =(package-initialize)=, which loads /all/
packages so I don't need to adjust load paths or load individual
packages.

The solution to my particular situation where I'm exporting the
entire document to markdown intended for Hugo as part of a build
process on my machine looks like this:

#+begin_src shell
  #!/bin/sh
  
  index=./content-org/index.org
  
  progn="(progn
    (package-initialize)
    (require 'ox-hugo)
    (org-hugo-export-wim-to-md :all-subtrees nil nil))"
  
  emacs --batch --visit "$index" --eval "$progn" --kill
#+end_src

The =--eval= flag is used to run by export commands, but you
could  have just as easily put these command in their own /dot el/ file
and load that - or put each /sexp/ as it's own argument to
=--eval=.

Note that this isn't tested for a continuous deployment environment
and you'd likely have to adjust a few things to ensure that
packages are available and whatnot.

Only three posts in and I've already managed to make a meta post
about how this blog is created.
   
   
** DONE Capture the output of a Vim command                             :vim:
CLOSED: [2020-06-24 Wed 22:54]
:PROPERTIES:
:CREATED:  <2020-06-24 Wed 22:54>
:export_file_name: capture-the-output-of-vim-command
:END:
Vim ships with an internal pager named "more" for displaying
command output that is used when the entire screen would be filled.
Despite it's name, /more/, it is *not* the command line utility
that you might be familiar with, and because it's a builtin feature vim cannot be configured
to use an alternative (like /less/).

Much like it's namesake, the internal /more/ pager leaves a lot to
be desired, like any ability to search the output. Fortunately, you can
capture the output of any vim expression and display however you want.
   
Vim provides three means of capturing /messages/: =:redir=,
=execute()= and =:set verbosefile=. We will be focusing on
=execute()= for our purposes. =:redir= can be useful if you just
want to quickly redirect output to a variable, file, register, or
some other source but you generally will rely on =execute()= while
scripting.
   
General usage is =execute({expr})=, or =execute([{expr}, {expr}])=
for multiple commands. Notice below how the entire output is
concatenated into a single string.
   
#+begin_src vimrc
  :execute('echon "foo"')
  'foo'
  :execute(['echon "foo"', 'echon "bar"'])
  'foobar'
#+end_src
   
Now that we have the output as a string we can write a
function that creates a temporary buffer with the output and opens
a window in the bottom of the current tabpage.
   
#+begin_src vimrc
  function! s:split(expr) abort
  let lines = split(execute(a:expr, 'silent'), "[\n\r]")
  let name = printf('capture://%s', a:expr)
  
  if bufexists(name) == v:true
  execute 'bwipeout' bufnr(name)
  endif
  
  execute 'botright' 'new' name
  
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal noswapfile
  setlocal filetype=vim
  
  call append(line('$'), lines)
  endfunction
#+end_src
   
Which when called will produce the output below (command =:P= is
defined later). The  show capturing the output of
=:command= to get a listing of all user defined commands.
   
#+DOWNLOADED: screenshot @ 2020-06-25 01:20:12
[[file:images/Posts/2020-06-25_01-20-12_screenshot.png]]
 
   
Or, if you use fzf-vim and you want to search the output you could use it like the below function.
   
#+begin_src vimrc
  function! s:fzf(expr) abort
  let lines = split(execute(a:expr, 'silent'), "[\n\r]")
  
  return fzf#run({
  \  'source': lines,
  \  'options': '--tiebreak begin --ansi --header-lines 1'
  \})
  endfunction
#+end_src
   
And as a example usage we could execute =:P! function= to search for all projectionist.vim functions.

#+DOWNLOADED: screenshot @ 2020-06-25 01:23:19
[[file:images/Posts/2020-06-25_01-23-19_screenshot.png]]
   
Now we can tie it all together with a /command/ that we easily use
from command mode, and function that will let us choose dumping to a
buffer or searching with fzf on demand.
   
#+begin_src vimrc
  function s:capture(expr, bang) abort
  if a:bang
  call s:fzf(a:expr)
  else
  call s:split(a:expr)
  endif
  endfunction
  
  command! -nargs=1 -bang -complete=command P call s:capture(<q-args>, <bang>0)
#+end_src

   
Below is the script in its entirety:

#+begin_src vimrc
  function! s:split(expr) abort
  let lines = split(execute(a:expr, 'silent'), "[\n\r]")
  let name = printf('capture://%s', a:expr)
  
  if bufexists(name) == v:true
  execute 'bwipeout' bufnr(name)
  end
  
  execute 'botright' 'new' name
  
  setlocal buftype=nofile
  setlocal bufhidden=hide
  setlocal noswapfile
  setlocal filetype=vim
  
  call append(line('$'), lines)
  endfunction
  
  function! s:fzf(expr) abort
  let lines = split(execute(a:expr, 'silent'), "[\n\r]")
  
  return fzf#run({
  \  'source': lines,
  \  'options': '--tiebreak begin --ansi --header-lines 1'
  \})
  endfunction
  
  function s:capture(expr, bang) abort
  if a:bang
  call s:fzf(a:expr)
  else
  call s:split(a:expr)
  endif
  endfunction
  
  command! -nargs=1 -bang -complete=command P call s:capture(<q-args>, <bang>0)
#+end_src

** DONE Create a Vim quickfix list from the clipboard                   :vim:
CLOSED: [2020-05-07 Thu 14:34]
:PROPERTIES:
:export_file_name: vim-quickfix-clipboard
:CREATED:  <2020-05-07 Thu 14:34>
:END:

Do you find yourself editing a buffer containing file paths and you
want to quickly switch between them?

The =:cex[pr][!} {expr}= command executes any valid vim expression
(={expr}=) and constructs a quickfix list from each string of the output.
   
Assuming you've =set clipboard= to =unnamed= or =unamedplus=, you
can supply the clipboard register (=@*=, or =@+= respectively) as a
vim expression.
   
#+begin_src vim -n 1
  "assuming :set clipboard=unnamed
  :cex @* 
#+end_src
   
or:
   
#+begin_src vim
  "assuming :set clipboard=unnamedplus
  :cex @+ 
#+end_src
   
Now you can set the quickfix to the current contents of your
clipboard, note that your input will still have to match your [[https://neovim.io/doc/user/options.html#'errorformat'][errorformat]].
   
@@html:<div class="block"><script id="asciicast-SHFPgdNJTVOH9j8RkSyQpQ2uz" src="https://asciinema.org/a/SHFPgdNJTVOH9j8RkSyQpQ2uz.js" async></script></div>@@
   
** TODO Importing lua rocks dependencies from vim :vim:lua:
:PROPERTIES:
:CREATED:  <2020-06-03 Wed 10:23>
:END:
First check what version of lua your install of vim is packaged with with =:h lua=. At the time of writing the packaged version was 5.1.
Next make sure that your shell version of luarocks coresponds with a 5.1 minor version. I'm using asdf to manage versions so I install lua and luarocks with =asdf install lua 5.1.5=.
Make sure that =LUA_PATH= and =LUA_CPATH= is set. Fish is my shell, so I have a function in my =config.fish= that sets these variables from luarocks.
   
#+begin_src fish
    function fish_set_lua_path
        set -xU LUA_PATH (luarocks path --lr-path)
        set -xU LUA_CPATH (luarocks path --lr-cpath)
    end
#+end_src
   
Debuggin problems:
- read =h: lua-require=
- Check package.cpath =:lua print(vim.inspect(package.cpath))= is your library in that path?
- rocks MUST be installed with a version of lua that matches vim's version. Vim will check for =**/5.1/*= paths, so if you installed with 5.3 it will be in a different directory.

  Test that your package is present:
   
  #+begin_src fish
   luarocks install --local lpeg
  #+end_src
   
  #+begin_src vimrc
    :lua print(vim.inspect(require('lpeg')))
  #+end_src
   
  #+begin_src fish
   nvim -V1 -Es -c"lua print(vim.inspect(require('lpeg')))" 2>&1
  #+end_src
   
  You should see a print out of the module if it succeeds.
** TODO Better bash scripts
:PROPERTIES:
:CREATED:  <2020-10-31 Sat 13:21>
:END:
Use redo to auto build, inline argbash m4 directives, auto shfmt to check, shellcheck
   
Use mnemosye examples
   
- use redo
- shfmt
- argbash inline script
** TODO Automate systemd services
:PROPERTIES:
:CREATED:  <2020-10-31 Sat 13:22>
:END:
   
Use redo, auto disable, refresh
use dwall examples
** TODO Elixir dynamic dispatch macro
:PROPERTIES:
:CREATED:  <2020-10-31 Sat 13:23>
:END:
   
Use mnemosyne example, auto delegate for all behaviour methods to application config
** TODO Elixir configuration server
:PROPERTIES:
:CREATED:  <2020-10-31 Sat 13:23>
:END:
   
Why? validate config on runtime
problem? Sometimes config is referenced lazy and you don't know its broken until it's too late
nimble options

** TODO elixir remote plugin neovim :elixir:
:PROPERTIES:
:CREATED:  <2020-05-29 Fri 14:54>
:END:
** TODO lua scripting and lua rocks for vim plugin :vim:lua:
:PROPERTIES:
:CREATED:  <2020-05-29 Fri 14:54>
:END:
** TODO Elixir Plug api token auth                                   :elixir:
:PROPERTIES:
:CREATED:  <2020-05-28 Thu 14:05>
:END:
** TODO Spotify skipping through all tracks after reboot :linux:
:PROPERTIES:
:CREATED:  <2020-05-21 Thu 12:55>
:END:
Make sure that pulse audio is started
** TODO Set the quickfix with mix errors                         :vim:elixir:
:PROPERTIES:
:CREATED:  <2020-05-11 Mon 13:33>
:END:
** TODO Writing a sorbet codegeneration tool                    :ruby:sorbet:
:PROPERTIES:
:CREATED:  <2020-05-09 Sat 11:17>
:END:
** TODO sorbet fixer using lua :ale:vim:lua:sorbet:
:PROPERTIES:
:CREATED:  <2020-05-08 Fri 15:52>
:END:
   
** TODO embedded syntax in vim                                          :vim:
:PROPERTIES:
:CREATED:  <2020-05-08 Fri 15:48>
:END:
** TODO Execute visual selection in vimscript                           :vim:
:PROPERTIES:
:CREATED:  <2020-05-08 Fri 15:29>
:END:
Yank the text (which will put it in register 0)
Because a register is valid vim expression we can just execute the contents of the register with
   
#+begin_src vim
  :@0
#+end_src
   
Execute a range
set mark 'a, 'b
   
#+begin_src vim
  :'a,'b y | @0
#+end_src
** TODO Filter the quickfix list to only valid entries :vim:
:PROPERTIES:
:CREATED:  <2020-05-08 Fri 14:33>
:END:
** TODO Setting the quick fix from another kitty pane                   :vim:
:PROPERTIES:
:CREATED:  <2020-05-08 Fri 14:21>
:END:
** TODO Org-pomodoro status in i3bar                                   :linux:i3:emacs:
:PROPERTIES:
:CREATED:  <2020-05-08 Fri 14:12>
:END:
** TODO Build Interactive cli tools with FZF                           :software_development:GPG:GNUPG:linux:
:PROPERTIES:
:CREATED:  <2020-05-08 Fri 14:00>
:END:
** TODO Use vim to browse manpages
:PROPERTIES:
:CREATED:  <2020-07-04 Sat 15:17>
:END:
=man --pager "nvim - +set ft=man"=

** TODO Use GNUPG to encrypt application secrets
:PROPERTIES:
:CREATED:  <2020-07-05 Sun 14:51>
:END:
*** Setup
:PROPERTIES:
:CREATED:  <2020-07-05 Sun 15:21>
:END:
**** Create a new gpg key pair
generate the key, just provide a name that is meaningful to your project so it's easy to reference.
#+begin_src bash
  gpg --full-generate-key
  # enter RSA for algo
  # enter 4096B for key length
  # enter "my-project" for name
  # enter "" for email
  # enter "" for comment
#+end_src
**** Export the key
:PROPERTIES:
:CREATED:  <2020-07-05 Sun 15:17>
:END:
#+begin_src bash
  gpg --export "my-project" --armour --output public.key
  gpg --export-secret-keys "my-project" --armour --output private.key
#+end_src
Commit the public key to the project, so that anyone can encrypt a file.
**don't** commit the private key.
*** Encrypting secrets
:PROPERTIES:
:CREATED:  <2020-07-05 Sun 15:27>
:END:
For any file you wish to encrypt you may either commit it in ascii
with armour, or as a binary. Specify that the public key should be
used. Use =--yes= and =--batch= to allow files to be overridden.
By default you should get a file that has the same name, but with
a /dot gpg/ extension.
    
#+begin_src bash
  gpg --verbose --yes --batch --output - --armour --recipient-file=public.key --encrypt "$2"
#+end_src
    
I'd recommend automatically adding all the unencrypted files to a /dot gitignore/ file.
    
You can use find to do this automatically:
    
#+begin_src bash
  find . -name '*.gpg' -print | sed 's#\./\(.*\)\.gpg#\1#' > .gitignore
#+end_src
    
*** Decrypting secrets
:PROPERTIES:
:CREATED:  <2020-07-05 Sun 15:21>
:END:
Assuming a CI environment:
    
Copy the content of your private key, and configure your
environment to make this avaible as an environment variable. In
the below example it's been set to =GPG_PRIVATE_KEY=. Do the same
for the GnuPG passphrase, this is optional if you chose to omit a
passphrase when generating a key.
    
Create a new tempdir that you'll use as GnuPG's home directory.
    
Import the GPG key
    
#+begin_src bash
  export GNUPGHOME=$(mktemp -d)
  
  printenv GPG_PRIVATE_KEY > "$GNUPGHOME/private.key"
  
  gpg --batch --import "${GNUPGHOME}/private.key"
  
  gpg --batch --yes --verbose --with-colons \
      --local-user=mnemosyne-project \
      --pinentry-mode=loopback \
      --passphrase="${GPG_PASSPHRASE}" \
      --decrypt-files ./config/secrets/**/*.gpg
  
  rm -rf "$GNUPGHOME"
#+end_src
    
This should create unencrypted versions of all the /dot gpg/ files next to the encrypted versions.
    
** TODO Deploying phoenix in docker
   
#+begin_src dockerfile
     # Image: base
     # Ubuntu 18.04.3
     # Erlang/OTP 22 [erts-10.6.4] [source] [64-bit] [smp:16:16] [ds:16:16:10] [async-threads:1] [hipe]
     # Elixir 1.10.0 (compiled with Erlang/OTP 22)
     # {{{
     FROM elixir:1.10.0-alpine as base

     RUN mix local.hex --force && \
         mix local.rebar --force && \
         # Required for argon2_elixir
         apk add --update --no-cache make gcc libc-dev && \
         # Clean up
         rm -rf /var/cache/apk/*

     COPY mix.* /app/
     COPY apps/web/mix.* /app/apps/web/
     COPY apps/core/mix.* /app/apps/core/
     ENV MIX_ENV=prod
     RUN cd app && mix do deps.get --only $MIX_ENV, deps.compile
     # }}}

     # Image: assets
     # Use for compiling static assets (JS, CSS, etc.), later pulled out for the
     # production phoenix release.
     #  {{{
     FROM node:12.18.2-alpine as assets
     COPY --from=base /app/deps/phoenix_html/package.json /app/deps/phoenix_html/package.json
     COPY --from=base /app/deps/phoenix_html/priv/static/phoenix_html.js /app/deps/phoenix_html/priv/static/phoenix_html.js
     COPY --from=base /app/deps/phoenix/package.json /app/deps/phoenix/package.json
     COPY --from=base /app/deps/phoenix/priv/static/phoenix.js /app/deps/phoenix/priv/static/phoenix.js
     RUN find /app/deps/
     WORKDIR /app/apps/web/assets
     COPY apps/web/assets/package*.json  ./
     RUN npm ci
     COPY apps/web/assets .
     RUN npm run deploy
     # }}}

     # Image: build
     # Builds the production phoenix release
     # {{{
     FROM base as build

     COPY config/config.exs config/prod.exs /app/config/
     # set build ENV
     WORKDIR /app
     COPY apps /app/apps
     WORKDIR /app
     RUN mix compile
     COPY config/releases.exs /app/config/
     COPY --from=assets /app/apps/web/priv/static /app/apps/web/priv/static
     RUN cd apps/web && mix phx.digest
     RUN mix release
     # }}}

     # Image: app
     # Final application image. Only contains erts and the release.
     # {{{
     FROM alpine:3.11 AS app

     RUN apk add --update --no-cache \
             # Required for erlang observer and etop
             ncurses \
             # Required for ssl
             openssl \
             libcap  \
             gnuplot \
             # Fonts for gnuplot
             fontconfig \
             ttf-ubuntu-font-family \
             ttf-dejavu \
             ttf-liberation \
             ttf-freefont \
             msttcorefonts-installer && \
             update-ms-fonts && \
             fc-cache -f && \
             rm -rf /var/cache/apk/*

     ENV APP_USER=app
     ENV APP_UID=101
     ENV APP_GID=500
     ENV SSL_GROUP="ssl-certs"
     ENV SSL_GID=600

     # Create the app group, app user, ssl-certs group, and add the app user to the
     # ssl-certs group.
     RUN addgroup -S -g $APP_GID $APP_USER && \
             addgroup -S -g $SSL_GID $SSL_GROUP && \
             adduser -S -G $APP_USER $APP_USER && \
             adduser $APP_USER $SSL_GROUP

     COPY --chown="$APP_UID:$APP_GID" config/docker/entrypoint.sh /usr/bin/
     COPY --from=build --chown="$APP_UID:$APP_GID" /app/_build/prod/rel/mnemosyne /app/

     RUN chmod +x /usr/bin/entrypoint.sh
     USER $USER
     WORKDIR /app
     ENTRYPOINT ["entrypoint.sh"]
     CMD ["/app/bin/mnemosyne", "start"]
     # }}}

     # vi: set foldmethod=marker:
#+end_src
:PROPERTIES:
:CREATED:  <2020-07-06 Mon 16:37>
:END:
** TODO Certbot with docker and elixir
:PROPERTIES:
:CREATED:  <2020-07-06 Mon 11:24>
:END:
   
Our goal is to create a mount so that certbot will be able to make
files at the path /.well-known publicily accessible. Using
docker-compose, create volumes for /etc/letsencrypt,
/var/lib/letsencrypt /fact check this/, and
/var/www/.well-known. Configure certbot and the web app to use
these. We mount letencrypt-well-known under the static path for the
app /This needs to be ammended to auto configure the version/.
   
We mount on /var/www/.well-known, but specify that the webroot is
/var/www so that it will create paths inside /var/www/.well-known.

List the domains that are associated with this webapp. Because this
is using the webroot authenticator only domains that already have
cname records and route to the ip that your web app is running from
can be registered.
   
**Warning**: Change the command to inclue =--dry-run= while you're
testing this lest you hit the rate-limit of 5 failed requests per
hour.
   
#+begin_src yaml
  version: "3.8"
  services:
    web_app:
      image: docker.pkg.github.com/dkendal/mnemosyne/mnemosyne_app:latest
      env_file:
        - ./config/docker/prod.env
  
        ports:
          - 80:4000/tcp
          - 443:4001/tcp
  
          volumes:
            - letsencrypt-etc:/etc/letsencrypt
            - letsencrypt-well-known:/app/lib/web-0.1.0/priv/static/.well-known
  
            certbot:
              image: certbot/certbot:latest
              command: certonly -n --webroot --webroot-path /var/www -d mnemosyne.dkendal.com
              restart: none
              depends_on:
                - web_app
                volumes:
                  - letsencrypt-etc:/etc/letsencrypt
                  - letsencrypt-lib:/var/lib/letsencrypt
                  - letsencrypt-well-known:/var/www/.well-known
  
                  volumes:
                    letsencrypt-etc:
                      letsencrypt-lib:
                        letsencrypt-well-known:
#+end_src
   
| certonly          | Obtain or renew a certificate, but do not install it        |
| -n                | Run non-interactively                                       |
| --webroot         | Place files in a server's webroot folder for authentication |
| --webroot-path -w |                                                             |
| --d               | Comma-separated list of domains to obtain a certificate for |

   
Run to get your cert.
   
#+begin_src sh
  docker-compose $(docker-machine config mnemosyne-prod-1) -f docker-compose.prod.yml --rm run certbot 
#+end_src
   
# Change permissions
#+begin_quote
For historical reasons, the containing directories are created with
permissions of 0700 meaning that certificates are accessible only to
servers that run as the root user. If you will never downgrade to an
older version of Certbot, then you can safely fix this using chmod
0755 /etc/letsencrypt/{live,archive}.

For servers that drop root privileges before attempting to read the
private key file, you will also need to use chgrp and chmod 0640 to
allow the server to read /etc/letsencrypt/live/$domain/privkey.pem.
#+end_quote
   
#+begin_src shell
  MNEMOSYNE_SSL_KEY_PATH=/etc/letsencrypt/live/mnemosyne.dkendal.com/privkey.pem
  MNEMOSYNE_SSL_CERT_PATH=/etc/letsencrypt/live/mnemosyne.dkendal.com/cert.pem
  INTERMEDIATE_CERTFILE_PATH=/etc/letsencrypt/live/mnemosyne.dkendal.com/chain.pem
#+end_src
   
# Configure elixir to use the certs
#+caption: /home/dylan/code/github.com/Dkendal/mnemosyne/config/releases.exs
#+begin_src elixir
     config :web, Web.Endpoint,
       cache_static_manifest: "priv/static/cache_manifest.json",
       url: [host: url_host, port: url_port],
       force_ssl: [hsts: true],
       http: [
         port: port,
         transport_options: [socket_opts: [:inet6]]
       ],
       https: [
         otp_app: :web,
         port: ssl_port,
         cipher_suite: :strong,
         keyfile: System.get_env("MNEMOSYNE_SSL_KEY_PATH"),
         certfile: System.get_env("MNEMOSYNE_SSL_CERT_PATH"),
         cacertfile: System.get_env("INTERMEDIATE_CERTFILE_PATH"),
         transport_options: [socket_opts: [:inet6]]
       ],
       secret_key_base: secret_key_base,
       server: true

#+end_src
** TODO build systems

| name            | Learning curve | composability | task runner | incremental rebuild | dynamic targets | edge case support |
|-----------------+----------------+---------------+-------------+---------------------+-----------------+-------------------|
| Make            |              0 |             1 |           0 |                   0 |                 |                 0 |
| Tup             |              1 |             ? |          -1 |                     |                 |                   |
| (Apenwarr) Redo |              0 |             1 |           0 |                     |                 |                 1 |
| Bazel           |             -1 |            -1 |           1 |                     |                 |                -1 |
| Earthly         |              1 |             1 |           1 |                   0 |                 |                 1 |

** TODO Elixir run migrations on deploy
:PROPERTIES:
:CREATED:  <2020-07-06 Mon 12:07>
:END:
#+caption: /home/dylan/code/github.com/Dkendal/mnemosyne/apps/core/lib/core/release.ex
#+begin_src elixir
     defmodule Core.Release do
       @app :core

       def migrate do
         for repo <- repos() do
           {:ok, _, _} = Ecto.Migrator.with_repo(repo, &Ecto.Migrator.run(&1, :up, all: true))
         end
       end

       def rollback(repo, version) do
         {:ok, _, _} = Ecto.Migrator.with_repo(repo, &Ecto.Migrator.run(&1, :down, to: version))
       end

       defp repos do
         Application.ensure_all_started(:ssl)
         Application.load(@app)
         Application.fetch_env!(@app, :ecto_repos)
       end
     end
#+end_src
   
#+caption: /home/dylan/code/github.com/Dkendal/mnemosyne/config/docker/entrypoint.sh
#+begin_src shell
  #!/bin/sh
  set -euxo pipefail
  
  ./bin/mnemosyne eval "Core.Release.migrate()"
  
  exec "$@"
#+end_src
   
#+begin_src dockerfile
     # ...
     ENTRYPOINT ["entrypoint.sh"]
     CMD ["/app/bin/mnemosyne", "start"]
#+end_src
   
** TODO Mass search and replace in VIM
:PROPERTIES:
:CREATED:  <2020-07-09 Thu 12:04>
:END:
   
Use the the =:grep= command to get a list of all results you wish to change.

#+begin_src vimrc
  :grep foobar
#+end_src
   
You can change the program that is used for =:grep= with =:set grepprg=.
   
If you want to refine the search results you can use =:Cfilter=, or if you want to add more results you can use =:grepadd= and specify another search.
   
Cfilter is a plugin that ships with all vim installations, and can be enabled using the native package manager.
   
Enable the cfiler plugin with the =packadd= command:

#+begin_src vimrc
  :packadd! cfilter
#+end_src
   
Once you're happy with list of lines you wish to change in the quickfix list, use your standard =:s/{from}/{to}/{substitute_flags}= command, but prepend it with =:cdo= so that it acts on each line in the quickfix:
   
#+begin_src vimrc
  :cdo s/foobar/barbaz/g
#+end_src
   
I like to test out my search and replace on one line before
applying it to all results. You can use the =set
inccommand=<split|nosplit>= to give you a live preview of how the
substitution will by applied in the current buffer.

One you're done replacing text you can just need to save each buffer, use =:cfdo= with =:w= to write each /file/ in the quickfix. =:cfdo= is like =:cdo= but the command will receive the file, instead of each line in the file, so we only save it once.
   
#+begin_src vimc
   :cfdo w
#+end_src
   
If you are really confident in your regex you could do this all in one line, I reccomended using the =c= substitution flag if you're going to do this to configure replacements:
#+begin_src vimrc
  :grep foobar | cdo s/foobar/barbaz/gc | cfdo w
#+end_src
   
One downside of using =:grep= is that the regex specification will differ from that which vim uses. You can get around this by using vim's internal search =:vim[grep]= but it is significantly slower. The upside is that you can reuse your search query.
Using vimgrep I could test my search in the buffer, and then issue the search and replace using the previous search string.
   
#+begin_src vimrc
  /foobar
  :vimgrep // lib/**/*.ex | cdo s//barbaz/gc | cfdo w
#+end_src
   

   
** TODO Write your own redux / FRP
:PROPERTIES:
:CREATED:  <2021-01-09 Sat 23:22>
:END:
** TODO Quick tip: Vim's 'makeef' option
:PROPERTIES:
:CREATED:  <2020-07-10 Fri 13:57>
:END:
   
One of the workflow's I use a lot is running a command, typically a
search with ripgrep or the output of compilation, I filter through
those results, and then I open the file's in the resulting list.
** TODO Typescript's conditional types
naked type left hand side union is an enumeration
right hand side reference is narrowed
** TODO Upgrade a monorepo to yarn 3
Assuming you have something like this

Assuming that /root/ is not set up as a workspace already.

#+begin_example
root
|- package.json
|- yarn.lock
|- packages
   |- foo
   |  |- package.json
   |  |- yarn.lock
   |- bar
       |- package.json
       |- yarn.lock

#+end_example

vendor yarn classic to each repo
=yarn set version classic=
ensure that .yarnrc.yml is created and contains yarn-path=.yarn/releases/...
you might have to do this is a different directory if it's picking up a yarn.lock file from a parent directory

for each of the repos you should be able to run =yarn install --frozen-lockfile= and have it not affect any of the yarn.lock files.

*Convert root to yarn 3*

=yarn set version stable=

ensure .yarnrc.yml is updated

optionally:

=yarn plugin import typescript=
=yarn plugin import workspace-tools=

then:

=yarn install=

update .gitignore and .gitattributes

#+begin_src .gitignore
.yarn
!.yarn/releases
!.yarn/plugins
#+end_src


/TODO change .yarnrc.yml settings to change node resultion and hoisting behavior/

commit everything at this step

*Convert each repo*

one at a time

convert each dependency to an exact version, important when we dependencies to the top level yarn.lock.

repeat steps above to upgrade to yarn 3.

*Add repos to workspaces*

Add "workspaces" entry to root package.json

# builder internal
fix module resolve shims
fix export maps




   
* TODO Styleguide 
:PROPERTIES:
:CREATED:  <2020-06-18 Thu 13:10>
:export_file_name: styleguide
:END:
** Alphabet test
(1)abcdefghijklmnopqrstuvwxyz(2)abcdefghijklmnopqrstuvwxyz(3)abcdefghijklmnopqrstuvwxyz
  
** Paragraphs
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim
ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut
aliquip ex ea commodo consequat. Duis aute irure dolor in
reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.
  
<hr/>
** Lists
- Lorem ipsum dolor sit amet
  - Lorem ipsum dolor sit amet
  - Lorem ipsum dolor sit amet
  - Lorem ipsum dolor sit amet
- Lorem ipsum dolor sit amet
  1) Lorem ipsum dolor sit amet
  2) Lorem ipsum dolor sit amet
  3) Lorem ipsum dolor sit amet
- Lorem ipsum dolor sit amet
  - [X] Lorem ipsum dolor sit amet
  - [X] Lorem ipsum dolor sit amet
  - [ ] Lorem ipsum dolor sit amet
- Lorem ipsum dolor sit amet
  - Lorem :: ipsum dolor sit amet
  - Lorem :: ipsum dolor sit amet
  - Lorem :: ipsum dolor sit amet

** Block quote
Here is some text that isn't part of the quote.

#+begin_quote
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim
ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut
aliquip ex ea commodo consequat. Duis aute irure dolor in
reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.
#+end_quote
  
Here is some text that follows the quote.
  
** Source block
   
#+begin_src elixir
    @short :line
#+end_src
    
\\
    
#+begin_src elixir
    30 char line==================
#+end_src
    
\\
    
#+begin_src elixir
    50 char line==========================================================
#+end_src
    
\\
    
#+begin_src elixir
    79 char line===================================================================
    79 char line===================================================================
#+end_src
    
\\
    
#+begin_src elixir
    @this_is a + :very ++ "very"++ "very"++ "very"++ "very"++ "very"++ "very" ++ "very" <> @@very + :very ++ "very"++ "very"++ "very"++ "very"++ "very"++ "very" ++ "very" <> @@very * ~r/long/ ~> ~w(line)
#+end_src
    
\\
    
#+begin_src elixir
      def at_cursor_pos?(
            {_, [closing: [line: l2, column: c2], line: l1, column: c1], _},
            line,
            col
          )
          when line in l1..l2 and col in c1..c2 do
        true
      end
#+end_src
     
** Wide source block

#+attr_html: :class wide-block
#+begin_src elixir
    defmodule Refactor do
      use NVim.Plugin
      require Logger

      defmacro is_ast(term), do: is_list(term) or is_tuple(term)

      def init(init_arg) do
        {:ok, init_arg}
      end

      def debug(x) do
        Logger.debug(inspect(x, pretty: true))
      end

      def at_cursor_pos?(ast, {lnum, cnum}), do: at_cursor_pos?(ast, lnum, cnum)

      def at_cursor_pos?(
            {_, [closing: [line: l2, column: c2], line: l1, column: c1], _},
            line,
            col
          )
          when line in l1..l2 and col in c1..c2 do
        true
      end

      # ...

      def count_left_just(string, count \\ 0)
      def count_left_just("", count), do: count
      def count_left_just(" " <> rest, count), do: count_left_just(rest, count + 1)
      def count_left_just(_, count), do: count

      @quoting_opts [columns: true]

      def string_to_quoted(line) do
        Code.string_to_quoted(line, @quoting_opts)
      end
    end
#+end_src
  
\\
  
** Example
  
#+begin_example
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim
ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut
aliquip ex ea commodo consequat. Duis aute irure dolor in
reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.
#+end_example

\\
** H2 Lorem ipsum dolor sit amet
\\
*** H3 Lorem ipsum dolor sit amet
\\
**** H4 Lorem ipsum dolor sit amet
\\
***** H5 Lorem ipsum dolor sit amet
\\
****** H6 Lorem ipsum dolor sit amet
\\

# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
