<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dylan Kendal</title>
    <link>/</link>
    <description>Recent content on Dylan Kendal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 May 2020 00:00:00 -0400</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Styleguide</title>
      <link>/styleguide/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 -0400</pubDate>
      
      <guid>/styleguide/</guid>
      <description>Alphabet test (1)abcdefghijklmnopqrstuvwxyz(2)abcdefghijklmnopqrstuvwxyz(3)abcdefghijklmnopqrstuvwxyz
Paragraphs Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
    <item>
      <title>Batch export Org-mode pages</title>
      <link>/posts/batch-export-org-mode-pages/</link>
      <pubDate>Sat, 27 Jun 2020 18:03:00 -0400</pubDate>
      
      <guid>/posts/batch-export-org-mode-pages/</guid>
      <description>A common task if - like me - you use Org-mode to create static websites; is to export the document to your destination format. Take this blog for instance. It&amp;rsquo;s written in Org-mode, which is exported to markdown for use by Hugo which will then compile it to HTML. The obvious choice for exporting your content would be to call the command directly within Emacs, but say you wanted to do this as a part of some other build process or as part of an automated continuous deployment process it would be necessary to invoke the export command from the shell.</description>
    </item>
    
    <item>
      <title>Capture the output of a Vim command</title>
      <link>/posts/capture-the-output-of-vim-command/</link>
      <pubDate>Wed, 24 Jun 2020 22:54:00 -0400</pubDate>
      
      <guid>/posts/capture-the-output-of-vim-command/</guid>
      <description>Vim ships with an internal pager named &amp;ldquo;more&amp;rdquo; for displaying command output that is used when the entire screen would be filled. Despite it&amp;rsquo;s name, more, it is not the command line utility that you might be familiar with, and because it&amp;rsquo;s a builtin feature vim cannot be configured to use an alternative (like less).
Much like it&amp;rsquo;s namesake, the internal more pager leaves a lot to be desired, like any ability to search the output.</description>
    </item>
    
    <item>
      <title>Create a Vim quickfix list from the clipboard</title>
      <link>/posts/vim-quickfix-clipboard/</link>
      <pubDate>Thu, 07 May 2020 14:34:00 -0400</pubDate>
      
      <guid>/posts/vim-quickfix-clipboard/</guid>
      <description>Do you find yourself editing a buffer containing file paths and you want to quickly switch between them?
The :cex[pr][!} {expr} command executes any valid vim expression ({expr}) and constructs a quickfix list from each string of the output.
Assuming you&amp;rsquo;ve set clipboard to unnamed or unamedplus, you can supply the clipboard register (@*, or @+ respectively) as a vim expression.
1 2  &amp;#34;assuming :set clipboard=unnamed:cex @*   or:</description>
    </item>
    
  </channel>
</rss>