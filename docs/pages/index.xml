<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pages on Digital Janitorial Services</title><link>https://blog.dkendal.com/pages/</link><description>Recent content in Pages on Digital Janitorial Services</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 03 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.dkendal.com/pages/index.xml" rel="self" type="application/rss+xml"/><item><title>Tap Capslock for Escape, Hold for Control</title><link>https://blog.dkendal.com/pages/capslock-tap-escape-hold-control/</link><pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate><guid>https://blog.dkendal.com/pages/capslock-tap-escape-hold-control/</guid><description>About a month ago I picked up a Dygma raise1: a split, ergonomic keyboard with programable firmware. At some point I&amp;rsquo;d like to write more about my foray into mechanical, and more specifically split board keebs but for now the most important part is that the Raise has a programmable firmware. Beyond simple rebinds it also allows for dual function keys, layers, and QMK tap dance2 like contextually sensitive bindings.</description></item><item><title>Capture paths from a Kitty window in Neovim</title><link>https://blog.dkendal.com/pages/capture-paths-kitty-neovim/</link><pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate><guid>https://blog.dkendal.com/pages/capture-paths-kitty-neovim/</guid><description>Tired of skimming through buffer output, looking for a path? I am! I spent relaxing day at the cottage hacking together a Lua plugin to do this automatically.
The script uses kitty&amp;rsquo;s remote control feature to grab text from all other windows in the current tab. To make things simple the script only cares about visible portion of the scrollback buffer, although you could certainly tweak the options to grab the whole buffer.</description></item><item><title>Jest code coverage in Neovim</title><link>https://blog.dkendal.com/pages/jest-code-coverage-neovim/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://blog.dkendal.com/pages/jest-code-coverage-neovim/</guid><description>I&amp;rsquo;ve been wanting to be able to view my code coverage directly within Vim for a long time. Not having to switch to browser or another window shortens the feedback loop, especially when developing a test for code you aren&amp;rsquo;t familiar with. Wallaby.js is a VSCode extension that handles this really well: it lets you run tests directly in the buffer and annotates lines with a green or red square to indicate if then statement was covered.</description></item><item><title>How to install Neovim nightly</title><link>https://blog.dkendal.com/pages/how-to-install-neovim-nightly/</link><pubDate>Sun, 24 Jan 2021 13:02:00 +0000</pubDate><guid>https://blog.dkendal.com/pages/how-to-install-neovim-nightly/</guid><description>Here&amp;rsquo;s a quick little script that you can use build and install the most recent release of Neovim.
#!/bin/bash cd ~ || exit 1 sudo rm -r neovim || true git clone https://github.com/neovim/neovim cd neovim || exit 1 sudo make CMAKE_BUILD_TYPE=Release install cd ~ || exit 1 sudo rm -r neovim I&amp;rsquo;ve used this on both Linux and Mac OSX without issue. This script was originally posted on a Neovim GitHub issue tracker which I&amp;rsquo;ve long since forgotten.</description></item><item><title>Change Kitty terminal color-scheme</title><link>https://blog.dkendal.com/pages/change-kitty-shell-color-scheme/</link><pubDate>Wed, 20 Jan 2021 23:05:00 +0000</pubDate><guid>https://blog.dkendal.com/pages/change-kitty-shell-color-scheme/</guid><description>One of the more persistant complaints about the Kitty terminal emulator is the inability to reload configuration. While you can&amp;rsquo;t change every option at runtime, you can change most display properties on fly if you enable remote control first. After this small tweak you can change color schemes, window padding, and font sizes on demand in a single, or all windows; current, and future.
‚ùØ kitty @ --help Usage: kitty @ [options] command .</description></item><item><title>Batch export Org-mode pages</title><link>https://blog.dkendal.com/pages/batch-export-org-mode-pages/</link><pubDate>Sat, 27 Jun 2020 18:03:00 +0000</pubDate><guid>https://blog.dkendal.com/pages/batch-export-org-mode-pages/</guid><description>A common task if - like me - you use Org-mode to create static websites; is to export the document to your destination format. Take this blog for instance. It&amp;rsquo;s written in Org-mode, which is exported to markdown for use by Hugo which will then compile it to HTML. The obvious choice for exporting your content would be to call the command directly within Emacs, but say you wanted to do this as a part of some other build process or as part of an automated continuous deployment process it would be necessary to invoke the export command from the shell.</description></item><item><title>Capture the output of a Vim command</title><link>https://blog.dkendal.com/pages/capture-the-output-of-vim-command/</link><pubDate>Wed, 24 Jun 2020 22:54:00 +0000</pubDate><guid>https://blog.dkendal.com/pages/capture-the-output-of-vim-command/</guid><description>Vim ships with an internal pager named &amp;ldquo;more&amp;rdquo; for displaying command output that is used when the entire screen would be filled. Despite it&amp;rsquo;s name, more, it is not the command line utility that you might be familiar with, and because it&amp;rsquo;s a builtin feature vim cannot be configured to use an alternative (like less).
Much like it&amp;rsquo;s namesake, the internal more pager leaves a lot to be desired, like any ability to search the output.</description></item><item><title>Create a Vim quickfix list from the clipboard</title><link>https://blog.dkendal.com/pages/vim-quickfix-clipboard/</link><pubDate>Thu, 07 May 2020 14:34:00 +0000</pubDate><guid>https://blog.dkendal.com/pages/vim-quickfix-clipboard/</guid><description>Do you find yourself editing a buffer containing file paths and you want to quickly switch between them?
The :cex[pr][!} {expr} command executes any valid vim expression ({expr}) and constructs a quickfix list from each string of the output.
Assuming you&amp;rsquo;ve set clipboard to unnamed or unamedplus, you can supply the clipboard register (@*, or @+ respectively) as a vim expression.
1 2 &amp;#34;assuming :set clipboard=unnamed :cex @* or:
&amp;#34;assuming :set clipboard=unnamedplus :cex @+ Now you can set the quickfix to the current contents of your clipboard, note that your input will still have to match your errorformat.</description></item></channel></rss>